name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean package -DskipTests
        working-directory: ./authuser/authuser  # Ajustando o diretório de trabalho para o comando Maven

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get remove -y docker docker-engine docker.io containerd runc
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

      - name: Start Docker service
        run: |
          sudo service docker start
          sudo usermod -aG docker $USER
          sudo systemctl enable docker

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: List files in authuser/authuser directory
        run: ls -l ./authuser/authuser  # Listar os arquivos para verificar a presença do docker-compose.staging.yml

      - name: Deploy to Staging
        run: |
          echo "Deploying to Staging Environment"
          docker-compose -f ./authuser/authuser/docker-compose.staging.yml up -d --build
        working-directory: ./authuser/authuser  # Define o diretório de trabalho para o comando Docker

  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get remove -y docker docker-engine docker.io containerd runc
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

      - name: Start Docker service
        run: |
          sudo service docker start
          sudo usermod -aG docker $USER
          sudo systemctl enable docker

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: List files in authuser/authuser directory
        run: ls -l ./authuser/authuser  # Listar os arquivos para verificar a presença do docker-compose.production.yml

      - name: Deploy to Production
        run: |
          echo "Deploying to Production Environment"
          docker-compose -f ./authuser/authuser/docker-compose.production.yml up -d --build
        working-directory: ./authuser/authuser  # Define o diretório de trabalho para o comando Docker
